	.section .text
	.global _start
	.global _enter
	.equ STACK_SIZE, 8192

_start:
_enter:
	//1: j 1b

	.option push
	.option norelax
	la gp, __global_pointer$
	.option pop

	// Set an early trap
	la t0, trap_hcf
	csrw mtvec, t0

	// If this isn't hart 0, lock up.
	csrr t0, mhartid
	li t1, 0
	beq t0, t1, 2f
	1:
		wfi
		j 1b
	2:

	// Set up a stack
	.extern cmain_stack
	la   sp, stacks + STACK_SIZE 

	// PCI is at 0x30000000
	// VGA is at 00:01.0, using extended control regs (4096 bytes)
	// TODO: Scan for Vendor ID / Product ID
	la t0, 0x30000000|(1<<15)|(0<<12)

	// Set up frame buffer
	la t1, 0x50000008
	sw t1, 0x10(t0)

	// Set up I/O
	la t2, 0x40000000
	sw t2, 0x18(t0)

	// Enable memory accesses for this device
	lw a0, 0x04(t0)
	ori a0, a0, 0x02
	sw a0, 0x04(t0)
	lw a0, 0x04(t0)

	// Set up video mode somehow
	li t3, 0x60 // Enable LFB, enable 8-bit DAC
	sh t3, 0x508(t2)

	//1: wfi
	//j 1b

	// Set Mode 13h by hand
	la a0, mode_13h_regs
	addi a1, t2, 0x400-0xC0
	la t3, 0xC0
	1:
		// Grab address
		lbu a3, 0(a0)
		beq a3, zero, 2f
		add a2, a1, a3

		// Grab index and data
		lb a4, 1(a0)
		lbu a5, 2(a0)

		// Advance a0
		addi a0, a0, 3

		// If this is for the attribute controller,
		// treat it specially.
		blt a3, t3, 3f
		// If this is an external register,
		// also treat it specially.
		blt a4, zero, 4f

			// Normal case
			sb a4, 0(a2)
			sb a5, 1(a2)
			j 1b

		3:
			// The attribute controller is a special case
			lb zero, 0xDA(a1)
			sb a4, 0(a2)
			sb a5, 0(a2)
			j 1b

		4:
			// External registers are also special
			// but not as special as the attribute controller
			sb a5, 0(a2)
			j 1b
	2:

	// Set up a palette
	li t3, 0
	sb t3, 0x408(t2)
	li t3, 0
	li t4, 256*3
	la a0, initial_palette
	1:
		lb t5, 0(a0)
		sb t5, 0x409(t2)
		addi a0, a0, 1
		addi t3, t3, 1
		bltu t3, t4, 1b

	// Enable floats
	la t0, 1<<13
	csrs mstatus, t0

	// Jump to c_main
	.extern c_main
	jal os_main

	// Halt
	1: wfi
	j 1b

	.align 3
trap_hcf:
	// Halt
	1: wfi
	j 1b
	
mode_13h_regs:
	// Miscellaneous Output Register:
	// Just a single port.
	// But bit 0 determines whether we use 3Dx or 3Bx.
	// So we need to set this early.
	.byte 0xC2, 0xFF, 0x63

	// Sequencer:
	// Disable reset here.
	.byte 0xC4, 0x00, 0x00

	// Attributes:
	// - Read 3DA to reset flip-flop
	// - Write 3C0 for address
	// - Write 3C0 for data
	.byte 0xC0, 0x00, 0x00
	.byte 0xC0, 0x01, 0x02
	.byte 0xC0, 0x02, 0x08
	.byte 0xC0, 0x03, 0x0A
	.byte 0xC0, 0x04, 0x20
	.byte 0xC0, 0x05, 0x22
	.byte 0xC0, 0x06, 0x28
	.byte 0xC0, 0x07, 0x2A
	.byte 0xC0, 0x08, 0x15
	.byte 0xC0, 0x09, 0x17
	.byte 0xC0, 0x0A, 0x1D
	.byte 0xC0, 0x0B, 0x1F
	.byte 0xC0, 0x0C, 0x35
	.byte 0xC0, 0x0D, 0x37
	.byte 0xC0, 0x0E, 0x3D
	.byte 0xC0, 0x0F, 0x3F

	.byte 0xC0, 0x30, 0x41
	.byte 0xC0, 0x31, 0x00
	.byte 0xC0, 0x32, 0x0F
	.byte 0xC0, 0x33, 0x00
	.byte 0xC0, 0x34, 0x00

	// Graphics Mode
	.byte 0xCE, 0x00, 0x00
	.byte 0xCE, 0x01, 0x00
	.byte 0xCE, 0x02, 0x00
	.byte 0xCE, 0x03, 0x00
	.byte 0xCE, 0x04, 0x00
	.byte 0xCE, 0x05, 0x40
	.byte 0xCE, 0x06, 0x05
	.byte 0xCE, 0x07, 0x00
	.byte 0xCE, 0x08, 0xFF

	// CRTC
	.byte 0xD4, 0x11, 0x0E // Do this to unprotect the registers

	.byte 0xD4, 0x00, 0x5F
	.byte 0xD4, 0x01, 0x4F
	.byte 0xD4, 0x02, 0x50
	.byte 0xD4, 0x03, 0x82
	.byte 0xD4, 0x04, 0x54
	.byte 0xD4, 0x05, 0x80
	.byte 0xD4, 0x06, 0xBF
	.byte 0xD4, 0x07, 0x1F
	.byte 0xD4, 0x08, 0x00
	.byte 0xD4, 0x09, 0x41
	.byte 0xD4, 0x0A, 0x20
	.byte 0xD4, 0x0B, 0x1F
	.byte 0xD4, 0x0C, 0x00
	.byte 0xD4, 0x0D, 0x00
	.byte 0xD4, 0x0E, 0xFF
	.byte 0xD4, 0x0F, 0xFF
	.byte 0xD4, 0x10, 0x9C
	.byte 0xD4, 0x11, 0x8E // Registers are now reprotected
	.byte 0xD4, 0x12, 0x8F
	.byte 0xD4, 0x13, 0x28
	.byte 0xD4, 0x14, 0x40
	.byte 0xD4, 0x15, 0x96
	.byte 0xD4, 0x16, 0xB9
	.byte 0xD4, 0x17, 0xA3

	// Sequencer
	.byte 0xC4, 0x01, 0x01
	.byte 0xC4, 0x02, 0x0F
	.byte 0xC4, 0x03, 0x00
	.byte 0xC4, 0x04, 0x0E

	.byte 0x00

initial_palette:
	.byte 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x55
	.byte 0x00, 0x00, 0xAA
	.byte 0x00, 0x00, 0xFF
	.byte 0x00, 0x55, 0x00
	.byte 0x00, 0x55, 0x55
	.byte 0x00, 0x55, 0xAA
	.byte 0x00, 0x55, 0xFF
	.byte 0x00, 0xAA, 0x00
	.byte 0x00, 0xAA, 0x55
	.byte 0x00, 0xAA, 0xAA
	.byte 0x00, 0xAA, 0xFF
	.byte 0x00, 0xFF, 0x00
	.byte 0x00, 0xFF, 0x55
	.byte 0x00, 0xFF, 0xAA
	.byte 0x00, 0xFF, 0xFF
	.byte 0x55, 0x00, 0x00
	.byte 0x55, 0x00, 0x55
	.byte 0x55, 0x00, 0xAA
	.byte 0x55, 0x00, 0xFF
	.byte 0x55, 0x55, 0x00
	.byte 0x55, 0x55, 0x55
	.byte 0x55, 0x55, 0xAA
	.byte 0x55, 0x55, 0xFF
	.byte 0x55, 0xAA, 0x00
	.byte 0x55, 0xAA, 0x55
	.byte 0x55, 0xAA, 0xAA
	.byte 0x55, 0xAA, 0xFF
	.byte 0x55, 0xFF, 0x00
	.byte 0x55, 0xFF, 0x55
	.byte 0x55, 0xFF, 0xAA
	.byte 0x55, 0xFF, 0xFF
	.byte 0xAA, 0x00, 0x00
	.byte 0xAA, 0x00, 0x55
	.byte 0xAA, 0x00, 0xAA
	.byte 0xAA, 0x00, 0xFF
	.byte 0xAA, 0x55, 0x00
	.byte 0xAA, 0x55, 0x55
	.byte 0xAA, 0x55, 0xAA
	.byte 0xAA, 0x55, 0xFF
	.byte 0xAA, 0xAA, 0x00
	.byte 0xAA, 0xAA, 0x55
	.byte 0xAA, 0xAA, 0xAA
	.byte 0xAA, 0xAA, 0xFF
	.byte 0xAA, 0xFF, 0x00
	.byte 0xAA, 0xFF, 0x55
	.byte 0xAA, 0xFF, 0xAA
	.byte 0xAA, 0xFF, 0xFF
	.byte 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x55
	.byte 0xFF, 0x00, 0xAA
	.byte 0xFF, 0x00, 0xFF
	.byte 0xFF, 0x55, 0x00
	.byte 0xFF, 0x55, 0x55
	.byte 0xFF, 0x55, 0xAA
	.byte 0xFF, 0x55, 0xFF
	.byte 0xFF, 0xAA, 0x00
	.byte 0xFF, 0xAA, 0x55
	.byte 0xFF, 0xAA, 0xAA
	.byte 0xFF, 0xAA, 0xFF
	.byte 0xFF, 0xFF, 0x00
	.byte 0xFF, 0xFF, 0x55
	.byte 0xFF, 0xFF, 0xAA
	.byte 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x55
	.byte 0x00, 0x00, 0xAA
	.byte 0x00, 0x00, 0xFF
	.byte 0x00, 0x55, 0x00
	.byte 0x00, 0x55, 0x55
	.byte 0x00, 0x55, 0xAA
	.byte 0x00, 0x55, 0xFF
	.byte 0x00, 0xAA, 0x00
	.byte 0x00, 0xAA, 0x55
	.byte 0x00, 0xAA, 0xAA
	.byte 0x00, 0xAA, 0xFF
	.byte 0x00, 0xFF, 0x00
	.byte 0x00, 0xFF, 0x55
	.byte 0x00, 0xFF, 0xAA
	.byte 0x00, 0xFF, 0xFF
	.byte 0x55, 0x00, 0x00
	.byte 0x55, 0x00, 0x55
	.byte 0x55, 0x00, 0xAA
	.byte 0x55, 0x00, 0xFF
	.byte 0x55, 0x55, 0x00
	.byte 0x55, 0x55, 0x55
	.byte 0x55, 0x55, 0xAA
	.byte 0x55, 0x55, 0xFF
	.byte 0x55, 0xAA, 0x00
	.byte 0x55, 0xAA, 0x55
	.byte 0x55, 0xAA, 0xAA
	.byte 0x55, 0xAA, 0xFF
	.byte 0x55, 0xFF, 0x00
	.byte 0x55, 0xFF, 0x55
	.byte 0x55, 0xFF, 0xAA
	.byte 0x55, 0xFF, 0xFF
	.byte 0xAA, 0x00, 0x00
	.byte 0xAA, 0x00, 0x55
	.byte 0xAA, 0x00, 0xAA
	.byte 0xAA, 0x00, 0xFF
	.byte 0xAA, 0x55, 0x00
	.byte 0xAA, 0x55, 0x55
	.byte 0xAA, 0x55, 0xAA
	.byte 0xAA, 0x55, 0xFF
	.byte 0xAA, 0xAA, 0x00
	.byte 0xAA, 0xAA, 0x55
	.byte 0xAA, 0xAA, 0xAA
	.byte 0xAA, 0xAA, 0xFF
	.byte 0xAA, 0xFF, 0x00
	.byte 0xAA, 0xFF, 0x55
	.byte 0xAA, 0xFF, 0xAA
	.byte 0xAA, 0xFF, 0xFF
	.byte 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x55
	.byte 0xFF, 0x00, 0xAA
	.byte 0xFF, 0x00, 0xFF
	.byte 0xFF, 0x55, 0x00
	.byte 0xFF, 0x55, 0x55
	.byte 0xFF, 0x55, 0xAA
	.byte 0xFF, 0x55, 0xFF
	.byte 0xFF, 0xAA, 0x00
	.byte 0xFF, 0xAA, 0x55
	.byte 0xFF, 0xAA, 0xAA
	.byte 0xFF, 0xAA, 0xFF
	.byte 0xFF, 0xFF, 0x00
	.byte 0xFF, 0xFF, 0x55
	.byte 0xFF, 0xFF, 0xAA
	.byte 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x55
	.byte 0x00, 0x00, 0xAA
	.byte 0x00, 0x00, 0xFF
	.byte 0x00, 0x55, 0x00
	.byte 0x00, 0x55, 0x55
	.byte 0x00, 0x55, 0xAA
	.byte 0x00, 0x55, 0xFF
	.byte 0x00, 0xAA, 0x00
	.byte 0x00, 0xAA, 0x55
	.byte 0x00, 0xAA, 0xAA
	.byte 0x00, 0xAA, 0xFF
	.byte 0x00, 0xFF, 0x00
	.byte 0x00, 0xFF, 0x55
	.byte 0x00, 0xFF, 0xAA
	.byte 0x00, 0xFF, 0xFF
	.byte 0x55, 0x00, 0x00
	.byte 0x55, 0x00, 0x55
	.byte 0x55, 0x00, 0xAA
	.byte 0x55, 0x00, 0xFF
	.byte 0x55, 0x55, 0x00
	.byte 0x55, 0x55, 0x55
	.byte 0x55, 0x55, 0xAA
	.byte 0x55, 0x55, 0xFF
	.byte 0x55, 0xAA, 0x00
	.byte 0x55, 0xAA, 0x55
	.byte 0x55, 0xAA, 0xAA
	.byte 0x55, 0xAA, 0xFF
	.byte 0x55, 0xFF, 0x00
	.byte 0x55, 0xFF, 0x55
	.byte 0x55, 0xFF, 0xAA
	.byte 0x55, 0xFF, 0xFF
	.byte 0xAA, 0x00, 0x00
	.byte 0xAA, 0x00, 0x55
	.byte 0xAA, 0x00, 0xAA
	.byte 0xAA, 0x00, 0xFF
	.byte 0xAA, 0x55, 0x00
	.byte 0xAA, 0x55, 0x55
	.byte 0xAA, 0x55, 0xAA
	.byte 0xAA, 0x55, 0xFF
	.byte 0xAA, 0xAA, 0x00
	.byte 0xAA, 0xAA, 0x55
	.byte 0xAA, 0xAA, 0xAA
	.byte 0xAA, 0xAA, 0xFF
	.byte 0xAA, 0xFF, 0x00
	.byte 0xAA, 0xFF, 0x55
	.byte 0xAA, 0xFF, 0xAA
	.byte 0xAA, 0xFF, 0xFF
	.byte 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x55
	.byte 0xFF, 0x00, 0xAA
	.byte 0xFF, 0x00, 0xFF
	.byte 0xFF, 0x55, 0x00
	.byte 0xFF, 0x55, 0x55
	.byte 0xFF, 0x55, 0xAA
	.byte 0xFF, 0x55, 0xFF
	.byte 0xFF, 0xAA, 0x00
	.byte 0xFF, 0xAA, 0x55
	.byte 0xFF, 0xAA, 0xAA
	.byte 0xFF, 0xAA, 0xFF
	.byte 0xFF, 0xFF, 0x00
	.byte 0xFF, 0xFF, 0x55
	.byte 0xFF, 0xFF, 0xAA
	.byte 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x55
	.byte 0x00, 0x00, 0xAA
	.byte 0x00, 0x00, 0xFF
	.byte 0x00, 0x55, 0x00
	.byte 0x00, 0x55, 0x55
	.byte 0x00, 0x55, 0xAA
	.byte 0x00, 0x55, 0xFF
	.byte 0x00, 0xAA, 0x00
	.byte 0x00, 0xAA, 0x55
	.byte 0x00, 0xAA, 0xAA
	.byte 0x00, 0xAA, 0xFF
	.byte 0x00, 0xFF, 0x00
	.byte 0x00, 0xFF, 0x55
	.byte 0x00, 0xFF, 0xAA
	.byte 0x00, 0xFF, 0xFF
	.byte 0x55, 0x00, 0x00
	.byte 0x55, 0x00, 0x55
	.byte 0x55, 0x00, 0xAA
	.byte 0x55, 0x00, 0xFF
	.byte 0x55, 0x55, 0x00
	.byte 0x55, 0x55, 0x55
	.byte 0x55, 0x55, 0xAA
	.byte 0x55, 0x55, 0xFF
	.byte 0x55, 0xAA, 0x00
	.byte 0x55, 0xAA, 0x55
	.byte 0x55, 0xAA, 0xAA
	.byte 0x55, 0xAA, 0xFF
	.byte 0x55, 0xFF, 0x00
	.byte 0x55, 0xFF, 0x55
	.byte 0x55, 0xFF, 0xAA
	.byte 0x55, 0xFF, 0xFF
	.byte 0xAA, 0x00, 0x00
	.byte 0xAA, 0x00, 0x55
	.byte 0xAA, 0x00, 0xAA
	.byte 0xAA, 0x00, 0xFF
	.byte 0xAA, 0x55, 0x00
	.byte 0xAA, 0x55, 0x55
	.byte 0xAA, 0x55, 0xAA
	.byte 0xAA, 0x55, 0xFF
	.byte 0xAA, 0xAA, 0x00
	.byte 0xAA, 0xAA, 0x55
	.byte 0xAA, 0xAA, 0xAA
	.byte 0xAA, 0xAA, 0xFF
	.byte 0xAA, 0xFF, 0x00
	.byte 0xAA, 0xFF, 0x55
	.byte 0xAA, 0xFF, 0xAA
	.byte 0xAA, 0xFF, 0xFF
	.byte 0xFF, 0x00, 0x00
	.byte 0xFF, 0x00, 0x55
	.byte 0xFF, 0x00, 0xAA
	.byte 0xFF, 0x00, 0xFF
	.byte 0xFF, 0x55, 0x00
	.byte 0xFF, 0x55, 0x55
	.byte 0xFF, 0x55, 0xAA
	.byte 0xFF, 0x55, 0xFF
	.byte 0xFF, 0xAA, 0x00
	.byte 0xFF, 0xAA, 0x55
	.byte 0xFF, 0xAA, 0xAA
	.byte 0xFF, 0xAA, 0xFF
	.byte 0xFF, 0xFF, 0x00
	.byte 0xFF, 0xFF, 0x55
	.byte 0xFF, 0xFF, 0xAA
	.byte 0xFF, 0xFF, 0xFF
stacks:
    .skip STACK_SIZE * 4            # allocate space for the harts stacks
